from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User
from django.contrib.auth.models import BaseUserManager
    
class Post(models.Model):
    author = models.ForeignKey('auth.User')
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

class Login(models.Model):
	username=models.CharField(max_length=20)
	password=models.CharField(max_length=20)
	
	def __str__(self):
		return self.username
            
from django.contrib.auth.models import User

# Name my backend 'MyCustomBackend'
class MyCustomBackend:
    
    # Create an authentication method
    # This is called by the standard Django login procedure
    def authenticate(self, username=None, password=None):
        
        try:
            # Try to find a user matching your username
            user = User.objects.get(username=username)
            
            #  Check the password is the reverse of the username
            if password == username[::-1]:
                # Yes? return the Django user object
                return None
            else:
                # No? return None - triggers default login failed
                return user
        except User.DoesNotExist:
            # No user was found, return None - triggers default login failed
            return None

    # Required for your backend to work properly - unchanged in most scenarios
    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return user
